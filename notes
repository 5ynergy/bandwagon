//BACK END:
//Person A work on login,User, Event, making sure that works, making sure can create User and user login
    //User data
    //Event - want event tied to user, want user to be logged in to create event 
    //Can test login on Insomnia, have session on server.js (replicate session and controllers for User: POST login/POST logout)
    //Will have to do mock login on Insomnia can test everything - can add validation afterwards
    //Test GET/POST routes for event/user details
//Person B work reading documention on Cloudinary on making sure image upload, work with Person A adding in what they think could work with routes
//Genre easiest to test, test that after making the table and route

 //FRONT END:
 //Markup in HTML (or immediately with Handlebars), can open up page and then break down segments into handlebar files
 // Look into CSS foundation
 //Focus on login page, nav bar, then other necessary pages
 //Page to create genre, create event, login/sign up, Profile 
 //Public js - can have login/logout from miniproject
 //Other functionality, can wait for routes to be completed

//Someone can work on seed data, but not completely necessary for this project

 //Then combine functionality
 
 //Main grading is sign in/signup/logup, mostly looking for GET and POST, just focus on create/get
 //Don't put too much emphasis on creating PUT/DELETE routes yet
 //As long as can create new data and display data, cloudinator would be new library package, following MVC structure
 //A lot of students try to implement way too much, make sure have required, then scale up
 //More valuable to have a more put together project, rather tahn more back-end 

 //Can work after project 2 was due, always an opportunity to continue implement more
 //Very good to sit everyone down for 10 minutes a day and talk about what going through, what implemented
// If see someone has more free time, let's leverage that and help out front end
//